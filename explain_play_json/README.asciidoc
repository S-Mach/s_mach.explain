= s_mach.explain_play_json: Play JSON Utility library
Lance Gatlin <lance.gatlin@gmail.com>
v1,16-Feb-16
:blogpost-status: unpublished
:blogpost-categories: s_mach, scala

Scaladocs: http://s-mach.github.io/s_mach.explain/explain_play_json/2.11.x/[2.11]

+s_mach.explain_play_json+ is an open-source Scala library for generating a JSONSchema or a human-readable explanation
for Play-framework JSON data and data types.

== Include in SBT
1. Add to +build.sbt+
+
[source,sbt,numbered]
----
libraryDependencies += "net.s_mach" %% "explain_play_json" % "1.0.0"
----
NOTE: +s_mach.codetools-play_json+ is compiled only for Scala 2.11/JDK6 while
waiting for Play framework adoption of Scala 2.12

== Versioning
+s_mach.explain_play_json+ uses semantic versioning (http://semver.org/). +s_mach.explain_play_json+
does not use the package private modifier. Instead, all code files outside of
the +s_mach.explain_play_json.impl+ package form the public interface and are governed by
the rules of semantic versioning. Code files inside the +s_mach.explain_play_json.impl+
package may be used by downstream applications and libraries. However, no
guarantees are made as to the stability or interface of code in the
+s_mach.explain_play_json.impl+ package between versions.

== Features

* Create a JsonExplanation for any Play-framework JSON (de)serializer (including macro-generated
(de)serializers for case classes)
* From JsonExplanation:
** Generation a JSONSchema (http://json-schema.org/)
** Generate human-readable remarks as a list of strings or as JSON

== Examples

----
Welcome to Scala 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_77).
Type in expressions for evaluation. Or try :help.

scala> :paste
// Entering paste mode (ctrl-D to finish)

  import java.util.Locale
  import s_mach.i18n._
  implicit val i18ncfg = I18NConfig(Locale.US)
  import play.api.libs.json.JsValue
  import s_mach.codetools.play_json._
  import s_mach.explain_json._
  import s_mach.explain_play_json._

  case class Name(
    first: String,
    middle: Option[String],
    last: String
  )
  implicit val explainJson_Name =
    ExplainPlayJson.forProductType[Name]

  case class Person(
    name: Name,
    age : Int,
    friendIds: List[Int]
  )
  implicit val explainJson_Person =
    ExplainPlayJson.forProductType[Person]


// Exiting paste mode, now interpreting.

import java.util.Locale
import s_mach.i18n._
i18ncfg: s_mach.i18n.I18NConfig = I18NConfig(Messages(keys.size=30),StrictInterpolator,StrictMessageResolver,DefaultStdI18N)
import play.api.libs.json.JsValue
import s_mach.codetools.play_json._
import s_mach.explain_json._
import s_mach.explain_play_json._
defined class Name
explainJson_Name: s_mach.explain_play_json.ExplainPlayJson[Name] = ExplainPlayJsonImpl(<function1>)
defined class Person
explainJson_Person: s_mach.explain_play_json.ExplainPlayJson[Person] = ExplainPlayJsonImpl(<function1>)

scala> println(explainPlayJson[Person].printJsonSchema[JsValue]("http://test.org").pretty)
{
  "$schema" : "http://json-schema.org/draft-04/schema#",
  "id" : "http://test.org",
  "type" : "object",
  "properties" : {
    "name" : {
      "id" : "http://test.org/name",
      "type" : "object",
      "properties" : {
        "first" : {
          "id" : "http://test.org/name/first",
          "type" : "string"
        },
        "middle" : {
          "id" : "http://test.org/name/middle",
          "type" : "string"
        },
        "last" : {
          "id" : "http://test.org/name/last",
          "type" : "string"
        }
      },
      "additionalProperties" : true,
      "required" : [ "first", "last" ]
    },
    "age" : {
      "id" : "http://test.org/age",
      "type" : "integer"
    },
    "friendIds" : {
      "id" : "http://test.org/friendIds",
      "type" : "array",
      "minItems" : 0,
      "uniqueItems" : false,
      "additionalItems" : false,
      "items" : {
        "id" : "http://test.org/friendIds/1",
        "type" : "integer"
      }
    }
  },
  "additionalProperties" : true,
  "required" : [ "name", "age", "friendIds" ]
}

scala> explainPlayJson[Person].printRemarks.printJson[JsValue].pretty
res1: String =
{
  "name" : {
    "first" : [ "must be string" ],
    "middle" : [ "must be string", "optional" ],
    "last" : [ "must be string" ]
  },
  "age" : [ "must be integer" ],
  "friendIds" : {
    "this" : [ "must be array" ],
    "*" : [ "must be integer" ]
  }
}

scala> explainPlayJson[Person].printRemarks
res2: s_mach.metadata.TypeRemarks = Rec(List(),List((name,Rec(List(),List((first,Val(List(must be string))), (middle,Arr(List(),ZeroOrOne,Val(List(must be string, optional)))), (last,Val(List(must be string)))))), (age,Val(List(must be integer))), (friendIds,Arr(List(must be array),ZeroOrMore,Val(List(must be integer))))))

scala>
----
